#pragma once
#include "misc.h"
#include "rendering.h"
#include <vector>
#include <string>

struct Ray {

};

struct RaycastResult {
    // todo

    RaycastResult pick_closest(RaycastResult other);
};

enum class ObjectType {
    Normal,
    Edited, // is currently being edited
    LuaGenerated, // generated by a lua script, geometry shouldn't be changed
};

struct Object {
    ObjectType type;

    ray::Vector3 position{}, scale{};
    ray::Quaternion rotation{};

    std::vector<ray::Vector3> vertices{};
    std::vector<int> triangle_indexes{};
    std::vector<ray::Color> triangle_colors{};

    std::vector<Object> children{};

    std::string lua_path{}; // only used if type is LuaGenerated

    void render(RenderContext &ctx, ray::Matrix parent_transform);
    ray::Matrix transform_matrix();
    RaycastResult& raycast(Ray r);

    static Object new_plane();
    static Object new_cube();
    static Object new_iso_sphere();
    static Object new_cylinder();
    static Object new_torus();
    static Object new_cone();
    static Object new_lua(std::string path);
};

struct CameraSettings {
    // todo
};

struct World {
    CameraSettings camera{};
    std::vector<Object> objects{};

    void render();
    RaycastResult& raycast(Ray r);
};