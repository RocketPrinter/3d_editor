#pragma once
#include <string>
#include <vector>
#include "misc.h"
#include "rendering.h"

struct Ray {

};

struct RaycastResult {
    // todo

    RaycastResult pick_closest(RaycastResult other);
};


struct Object {
    enum class ObjectType {
        Normal,
        Edited, // is currently being edited
        LuaGenerated, // generated by a lua script, geometry shouldn't be changed
    } type = ObjectType::Normal;

    std::string name{"New object"};

    ray::Vector3 position{}, scale{1,1,1};
    ray::Quaternion rotation = ray::QuaternionIdentity();

    std::vector<ray::Vector3> vertices{};
    std::vector<int> triangle_indexes{}; // CCW winding order
    std::vector<ray::Color> triangle_colors{};

    std::vector<Object> children{};

    std::string lua_path{}; // only used if type is LuaGenerated

    ray::Matrix get_model_matrix();
    void add_to_render(Renderer &renderer, ray::Matrix &parent_transform);
    RaycastResult& raycast(Ray r);

    static Object new_triangle();
    static Object new_cube();
    static Object new_iso_sphere();
    static Object new_cylinder();
    static Object new_torus();
    static Object new_cone();
    static Object new_lua(std::string path);
};

struct World {
    struct CameraSettings {
        // camera is orbiting around the target
        ray::Vector3 target{0,0,0};
        float yaw=PI/5, pitch=-PI/4.2, distance = 4, fov = PI/2.;

        void input_movement();
        ray::Matrix get_view_projection_matrix();
    } camera{};
    std::vector<Object> objects{};
    bool debug_render = false;

    void render();
    RaycastResult& raycast(Ray r);
};
